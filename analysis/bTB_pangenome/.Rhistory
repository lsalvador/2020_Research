#         if (totcurstrains[j]%in%strain.log) { # if strain is extant
#           tottype <- tottype+1
#         }
#         if (sum(!strain.log%in%totcurstrains)>0 && time!=runtime) {
#           stop("Deleted sequence for observed sample")
#         }
#         recorded <- FALSE
#         if (length(obs.strain)!=0) {
#           if (totcurstrains[j] %in% sampledstrains) {
#             recorded <- TRUE
#           }
# #           if (deepseq) {
# #             for (w in 1:length(obs.strain)) {
# #               if (totcurstrains[j] %in% obs.strain[[w]]) {
# #                 recorded <- TRUE
# #               }
# #             }
# #           } else {
# #             if (totcurstrains[j] %in% obs.strain) {
# #               recorded <- TRUE
# #             }
# #           }
#         }
if (sum(!totcurstrains%in%strain.log)>0) {
notpresentpos <- which(!totcurstrains%in%strain.log)
notpresent <- totcurstrains[notpresentpos]
if (sum(notpresent%in%sampledstrains)>0) {
deleters <- notpresentpos[which(!notpresent%in%sampledstrains)]
} else {
deleters <- notpresentpos
}
}
#         if (tottype>0) { # don't delete if still around
#           uniquestrains <- uniquestrains+1
#         } else if (tottype==0 && !recorded) { # if not around AND not logged
#           deleters <- c(deleters, j) # delete
#         }
#       }
if (length(deleters)>0) {
for (i in sort(deleters, decreasing=T)) {
libr[[i]] <- NULL
mut.nuc[[i]] <- NULL
}
deletegroup <- totcurstrains[deleters]
totcurstrains <- totcurstrains[-deleters]
}
}
time <- time+1
}
if (full) {
return(invisible(list(libr=libr, nuc=mut.nuc, librstrains=totcurstrains, obs.freq=obs.freq, obs.strain=obs.strain,
popvec=popvec)))
} else {
return(invisible(list(libr=libr, nuc=mut.nuc, librstrains=totcurstrains, obs.strain=obs.strain, obs.time=obs.time,
popvec=popvec)))
}
}
x<-simulatepopulation(m.rate=0.0005, runtime=10000, equi.pop=2000,
sample.times=(1:5)*2000, n.samples=5,
genomelength=10000, full=FALSE)
install.packages("seedy")
install.packages("ape")
rtree?
.
?rtree
library("ape")
rtree()
rtree(9,tip.label = NULL)
plot(rtree(9,tip.label = NULL))
plot(rtree(9,tip.label = c(t1,t2,t3,t4,t5,t6,t7,t8,t9)))
plot(rtree(9,tip.label = c("t1,t2,t3,t4,t5,t6,t7,t8,t9")))
plot(rtree(9,tip.label = c("t1","t2","t3","t4","t5",t6","t7","t8","t9")))
plot(rtree(9,tip.label = "1,2,3,4,5,6,7,8,9"))
plot(rtree(2,tip.label = "1","2"))
plot(rtree(2,tip.label = "1,2"))
plot(rtree(2,tip.label = c("1","2"))
)
plot(rtree(9,tip.label = c("a","a","a","b","b","b","c","c","c")))
plot(rtree(3,tip.label = c("a","a","a")))
plot(rtree(3,tip.label = c("b","b","b")))
plot(rtree(3,tip.label = c("b","b","b")))
plot(rtree(3,tip.label = c("c","c","c")))
plot(rtree(3,tip.label = c("c","c","c")))
setwd("Documents/2020_research/analysis/bTB_pangenome/")
assemb_stat <- read.csv("transposed_report.tsv", sep = "\t")
View(assemb_stat)
normalized_stats <- exp(normalize(numeric_stats, method = "standardize",range = c(0,1), margin = 2))
library(BBmisc)
normalized_stats <- exp(normalize(numeric_stats, method = "standardize",range = c(0,1), margin = 2))
normalized_stats <- exp(normalize(assemb_stat, method = "standardize",range = c(0,1), margin = 2))
assemb_stat <- read.csv("transposed_report.tsv", sep = "\t")
numeric_stats <- assemb_stat[-1]
normalized_stats <- exp(normalize(numeric_stats, method = "standardize",range = c(0,1), margin = 2))
View(normalized_stats)
dbscan::kNNdistplot(normalized_stats, k =  5)
dbscan::kNNdistplot(normalized_stats, k =  5)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 1, minPts = 5)
fviz_cluster(db, dat, stand = FALSE, frame = FALSE)
#import the necessary libraries
library("ggplot2") #advanced plotting
library("BBmisc") #builtin normalization function
library("factoextra") # clustering algorithms & visualization
library("dbscan")
db <- dbscan::dbscan(normalized_stats,eps = 1, minPts = 5)
fviz_cluster(db, dat, stand = FALSE, frame = FALSE)
db <- dbscan::dbscan(normalized_stats,eps = 1, minPts = 5)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
db <- dbscan::dbscan(normalized_stats,eps = 100, minPts = 5)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
db <- dbscan::dbscan(normalized_stats,eps = 1, minPts = 5)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
dbscan::kNNdistplot(normalized_stats, k =  5)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 1, minPts = 10)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
db <- dbscan::dbscan(normalized_stats,eps = 1, minPts = 100)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
View(db)
db[["cluster"]]
db <- dbscan::dbscan(normalized_stats,eps = 2, minPts = 100)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
db[["cluster"]]
db <- dbscan::dbscan(normalized_stats,eps = 10, minPts = 100)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
db[["cluster"]]
p <- ggplot(stack(normalized_stats),aes(x = ind, y = values))
p + geom_boxplot() + coord_flip()
View(normalized_stats)
assemb_stat <- read.csv("transposed_report.tsv", sep = "\t")
numeric_stats <- assemb_stat[-1]
normalized_stats <- normalize(numeric_stats, method = "standardize",range = c(0,1), margin = 2)
dbscan::kNNdistplot(normalized_stats, k =  5)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 10, minPts = 100)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
dbscan::kNNdistplot(normalized_stats, k =  100)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 10, minPts = 100)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
dbscan::kNNdistplot(normalized_stats, k =  100)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 5, minPts = 100)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
dbscan::kNNdistplot(normalized_stats, k =  100)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 5, minPts = 5)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
dbscan::kNNdistplot(normalized_stats, k =  100)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 5, minPts = 2)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
dbscan::kNNdistplot(normalized_stats, k =  100)
abline(h = 1, lty = 2)
db <- dbscan::dbscan(normalized_stats,eps = 5, minPts = 10)
fviz_cluster(db, normalized_stats, stand = FALSE, frame = FALSE)
db$cluster
View(assemb_stat)
assemb_stat$Assembly
print(assemb_stat$Assembly)
write.csv2(assemb_stat, file = "assemb.csv")
boxplot(normalized_stats$N50)
boxplot(assemb_stat$N50)
boxplot(assemb_stat$N75)
boxplot(assemb_stat$L50)
getwd()
library("tidyverse")  # data manipulation
library("cluster")    # clustering algorithms
library("factoextra") # clustering algorithms & visualization
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
#create hamming distance matrix
dna = readDNAStringSet("accessory_binary_genes.fa")
mat <- as.matrix(stringDist(dna, method="hamming"))
source("http://bioconductor.org/biocLite.R")
biocLite("Biostrings")
library(Biostrings)
dna = readDNAStringSet("accessory_binary_genes.fa")
mat <- as.matrix(stringDist(dna, method="hamming"))
View(mat)
fviz_dist(stringDist(dna, method="hamming"), gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
mat_12 <- ifelse(mat>12,0,mat)
View(mat_12)
fviz_nbclust(mat, kmeans, method = "silhouette")
k2 <- kmeans(mat, centers = 2, nstart = 25)
str(k2)
fviz_cluster(k2, ellipse = FALSE, geom = "point", data = mat) + ggtitle("")
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
library(ggplot2)
# Create data.
data <- data.frame(category=c("Core Genome", "Accessory Genome"), count=c(0.35, 0.65))
# Compute percentages
data$fraction <- data$count / sum(data$count)
# Compute the cumulative percentages (top of each rectangle)
data$ymax <- cumsum(data$fraction)
# Compute the bottom of each rectangle
data$ymin <- c(0, head(data$ymax, n=-1))
# Compute label position
data$labelPosition <- (data$ymax + data$ymin) / 2
# Compute a good label
data$label <- paste0(data$category, "\n value: ", data$count)
View(data)
data$label <- paste0(data$category, "\n value: ", data$count,"%")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=2, aes(y=labelPosition, label=label, color=category), size=6) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=2, aes(y=labelPosition, label=label, color=category), size=4) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=0, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=4, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=8, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=6, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=3) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=4) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=1) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=2) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=10) +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette=3) +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 6)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 3)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 3.5)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 3.9)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-1, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.5, aes(y=labelPosition, label=label, color=category), size=4) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=2, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1.2, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
# Compute a good label
data$label <- paste0(data$category, "\n", data$count,"%")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette="Accent") +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=c("red","blue")) +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) +
geom_rect() +
geom_text( x=1, aes(y=labelPosition, label=label, color=category), size=5) + # x here controls label position (inner / outer)
scale_fill_brewer(palette=c("Accent")) +
scale_color_brewer(palette="Accent") +
coord_polar(theta="y") +
xlim(c(-3, 4)) +
theme_void() +
theme(legend.position = "none")
library(ape)
tree1 <-read.tree(file="accessory_genome.newick")
tree2 <-read.tree(file="core_genome.newick")
association <- cbind(tree1$tip.label, tree1$tip.label)
#tree1 and tree2 should have exact same tips/taxa
tre1 <- ladderize(tree1,FALSE)
tre2 <- ladderize(tree2,FALSE)
cophyloplot(tre1, tre2, assoc = association, length.line = 4, space = 400, gap = 1, show.tip.label = FALSE)
library(ape)
tree1 <-read.nexus(file="accessory_genome.nexus")
tree2 <-read.nexus(file="core_genome.nexus")
association <- cbind(tree1$tip.label, tree1$tip.label)
#tree1 and tree2 should have exact same tips/taxa
tre1 <- ladderize(tree1,FALSE)
tre2 <- ladderize(tree2,FALSE)
cophyloplot(tre1, tre2, assoc = association, length.line = 4, space = 400, gap = 1, show.tip.label = FALSE)
library(ape)
tree1 <-read.nexus(file="accesory_genome.nexus")
tree2 <-read.nexus(file="core_genome.nexus")
association <- cbind(tree1$tip.label, tree1$tip.label)
#tree1 and tree2 should have exact same tips/taxa
tre1 <- ladderize(tree1,FALSE)
tre2 <- ladderize(tree2,FALSE)
cophyloplot(tre1, tre2, assoc = association, length.line = 4, space = 400, gap = 1, show.tip.label = FALSE)
install.packages(‘selectr’)
install.packages(‘xml2’)
install.packages(‘rvest’)
library(selectr)
library(xml2)
library(rvest)
install.packages('selectr')
install.packages('xml2')
install.packages('rvest')
library(selectr)
library(xml2)
library(rvest)
install.packages("selectr")
